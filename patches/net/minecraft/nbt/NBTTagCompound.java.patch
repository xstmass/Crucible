--- ../src-base/minecraft/net/minecraft/nbt/NBTTagCompound.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTTagCompound.java
@@ -3,23 +3,37 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.Callable;
+import java.util.regex.Pattern;
+
+import io.github.crucible.Crucible;
+import io.github.crucible.nbt.ICrucibleString;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.util.ReportedException;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class NBTTagCompound extends NBTBase
+public class NBTTagCompound extends NBTBase implements ICrucibleString
 {
     private static final Logger logger = LogManager.getLogger();
-    private Map tagMap = new HashMap();
+    private Map<String, NBTBase> tagMap = null;
     private static final String __OBFID = "CL_00001215";
 
+    public NBTTagCompound()
+    {
+    	this (false);
+    }
+    
+    public NBTTagCompound(boolean _copy)
+    {
+    	if (!_copy)
+    	{
+    		tagMap = new HashMap<String, NBTBase>();
+    	}
+    }
+    
     void write(DataOutput p_74734_1_) throws IOException
     {
         Iterator iterator = this.tagMap.keySet().iterator();
@@ -67,57 +81,57 @@
 
     public void setTag(String p_74782_1_, NBTBase p_74782_2_)
     {
-        this.tagMap.put(p_74782_1_, p_74782_2_);
+        this.tagMap.put(Crucible.deduplicate(p_74782_1_), p_74782_2_);
     }
 
     public void setByte(String p_74774_1_, byte p_74774_2_)
     {
-        this.tagMap.put(p_74774_1_, new NBTTagByte(p_74774_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74774_1_), new NBTTagByte(p_74774_2_));
     }
 
     public void setShort(String p_74777_1_, short p_74777_2_)
     {
-        this.tagMap.put(p_74777_1_, new NBTTagShort(p_74777_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74777_1_), new NBTTagShort(p_74777_2_));
     }
 
     public void setInteger(String p_74768_1_, int p_74768_2_)
     {
-        this.tagMap.put(p_74768_1_, new NBTTagInt(p_74768_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74768_1_), new NBTTagInt(p_74768_2_));
     }
 
     public void setLong(String p_74772_1_, long p_74772_2_)
     {
-        this.tagMap.put(p_74772_1_, new NBTTagLong(p_74772_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74772_1_), new NBTTagLong(p_74772_2_));
     }
 
     public void setFloat(String p_74776_1_, float p_74776_2_)
     {
-        this.tagMap.put(p_74776_1_, new NBTTagFloat(p_74776_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74776_1_), new NBTTagFloat(p_74776_2_));
     }
 
     public void setDouble(String p_74780_1_, double p_74780_2_)
     {
-        this.tagMap.put(p_74780_1_, new NBTTagDouble(p_74780_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74780_1_), new NBTTagDouble(p_74780_2_));
     }
 
     public void setString(String p_74778_1_, String p_74778_2_)
     {
-        this.tagMap.put(p_74778_1_, new NBTTagString(p_74778_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74778_1_), new NBTTagString(p_74778_2_));
     }
 
     public void setByteArray(String p_74773_1_, byte[] p_74773_2_)
     {
-        this.tagMap.put(p_74773_1_, new NBTTagByteArray(p_74773_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74773_1_), new NBTTagByteArray(p_74773_2_));
     }
 
     public void setIntArray(String p_74783_1_, int[] p_74783_2_)
     {
-        this.tagMap.put(p_74783_1_, new NBTTagIntArray(p_74783_2_));
+        this.tagMap.put(Crucible.deduplicate(p_74783_1_), new NBTTagIntArray(p_74783_2_));
     }
 
     public void setBoolean(String p_74757_1_, boolean p_74757_2_)
     {
-        this.setByte(p_74757_1_, (byte)(p_74757_2_ ? 1 : 0));
+        this.setByte(Crucible.deduplicate(p_74757_1_), (byte)(p_74757_2_ ? 1 : 0));
     }
 
     public NBTBase getTag(String p_74781_1_)
@@ -336,15 +350,12 @@
 
     public NBTBase copy()
     {
-        NBTTagCompound nbttagcompound = new NBTTagCompound();
-        Iterator iterator = this.tagMap.keySet().iterator();
+        NBTTagCompound nbttagcompound = new NBTTagCompound(true);
+        nbttagcompound.tagMap = new HashMap<String, NBTBase>((int)(this.tagMap.size()*1.35)+1); //compaction factor
+        
+        for(Map.Entry<String, NBTBase> s : this.tagMap.entrySet())
+            nbttagcompound.setTag(s.getKey(), s.getValue().copy());
 
-        while (iterator.hasNext())
-        {
-            String s = (String)iterator.next();
-            nbttagcompound.setTag(s, ((NBTBase)this.tagMap.get(s)).copy());
-        }
-
         return nbttagcompound;
     }
 
@@ -407,4 +418,29 @@
             throw new ReportedException(crashreport);
         }
     }
+
+    @Override
+    public String crucible_toString()
+    {
+        StringBuilder stringbuilder = new StringBuilder("{");
+        Collection<String> collection = this.tagMap.keySet();
+
+        for (String s : collection)
+        {
+            if (stringbuilder.length() != 1)
+            {
+                stringbuilder.append(',');
+            }
+
+            stringbuilder.append(handleEscape(s)).append(':').append(((ICrucibleString)this.tagMap.get(s)).crucible_toString());
+        }
+
+        return stringbuilder.append('}').toString();
+    }
+
+    private static final Pattern SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
+    protected static String handleEscape(String p_193582_0_)
+    {
+        return SIMPLE_VALUE.matcher(p_193582_0_).matches() ? p_193582_0_ : NBTTagString.quoteAndEscape(p_193582_0_);
+    }
 }
